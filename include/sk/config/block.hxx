/*
 * Copyright (c) 2019, 2020, 2021 SiKol Ltd.
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

#ifndef SK_CONFIG_BLOCK_HXX_INCLUDED
#define SK_CONFIG_BLOCK_HXX_INCLUDED

#include <utility>

#include <boost/spirit/home/x3.hpp>

#include <sk/config/detail/make_member_parser.hxx>
#include <sk/config/detail/parser/option_terminator.hxx>
#include <sk/config/detail/propagate.hxx>
#include <sk/config/detail/rule.hxx>

namespace sk::config {

    /*
     * block(label, members...): parse a block with the given label which
     * contains the members.
     */
    template <typename U, typename T, typename V, typename... Members>
    auto block(auto label, V T::*mm, Members &&...members) {
        namespace x3 = boost::spirit::x3;

        auto member_parser = *(... | std::forward<Members>(members));

        auto do_nothing = [&](auto &) {};
        auto parser = x3::as_parser(label)            //
                      >> ('{'                         //
                          > member_parser[do_nothing] //
                          > '}')                      //
                      > x3::no_skip[detail::parser::option_terminator];
        return detail::rule<U>(label, parser)[detail::propagate(mm)];
    }

    template <typename U, typename W, typename T, typename V,
              typename... Members>
    auto block(auto label, W U::*name, V T::*mm, Members &&...members) {
        namespace x3 = boost::spirit::x3;

        auto member_parser = *(... | std::forward<Members>(members));

        auto do_nothing = [&](auto &) {};
        auto parser = x3::as_parser(label)                //
                      >> detail::make_member_parser(name) //
                      >> ('{'                             //
                          > member_parser[do_nothing]     //
                          > '}')                          //
                      > x3::no_skip[detail::parser::option_terminator];
        return detail::rule<U>(label, parser)[detail::propagate(mm)];
    }

} // namespace sk::config

#endif // SK_CONFIG_BLOCK_HXX_INCLUDED
