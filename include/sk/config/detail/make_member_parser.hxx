/*
 * Copyright (c) 2019, 2020, 2021 SiKol Ltd.
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

#ifndef SK_CONFIG_DETAIL_MAKE_MEMBER_PARSER_HXX_INCLUDED
#define SK_CONFIG_DETAIL_MAKE_MEMBER_PARSER_HXX_INCLUDED

#include <deque>
#include <list>
#include <set>
#include <unordered_set>
#include <vector>
#include <variant>

#include <boost/spirit/home/x3.hpp>

#include <sk/config/detail/propagate.hxx>
#include <sk/config/error.hxx>
#include <sk/config/parser/any_string.hxx>
#include <sk/config/parser/identifier.hxx>
#include <sk/config/parser/qstring.hxx>
#include <sk/config/parser/list.hxx>
#include <sk/config/parser/variant.hxx>
#include <sk/config/parser/tuple.hxx>

namespace sk::config::detail {

    template <typename T> struct parser_for {
    };

    template <typename T> struct parser_for<std::vector<T>> {
        using parser = parser::vector_parser<typename parser_for<T>::parser>;
        using rule_type = std::vector<T>;
        static constexpr char const name[] = "a string";
    };

    template <typename Char> struct parser_for<std::basic_string<Char>> {
        using parser = parser::any_string_parser<Char>;
        using rule_type = std::basic_string<Char>;
        static constexpr char const name[] = "a string";
    };

    template <std::signed_integral T> struct parser_for<T> {
        using parser = boost::spirit::x3::int_parser<T>;
        using rule_type = T;
        static constexpr char const name[] = "an integer";
    };

    template <std::unsigned_integral T> struct parser_for<T> {
        using parser = boost::spirit::x3::int_parser<T>;
        using rule_type = T;
        static constexpr char const name[] = "a positive integer";
    };

    template <typename... Ts> struct parser_for<std::variant<Ts...>> {
        using parser = parser::variant_parser<typename parser_for<Ts>::parser...>;
        using rule_type = std::variant<Ts...>;
        static constexpr char const name[] = "a value";
    };

    template <typename... Ts> struct parser_for<std::tuple<Ts...>> {
        using parser =
            parser::tuple_parser<typename parser_for<Ts>::parser...>;
        using rule_type = std::tuple<Ts...>;
        static constexpr char const name[] = "a list of values";
    };

    template <typename T>
    struct config_real_policies : boost::spirit::x3::real_policies<T> {};

    template <std::floating_point T> struct parser_for<T> {
        using parser =
            boost::spirit::x3::real_parser<float, config_real_policies<float>>;
        using rule_type = T;
        static constexpr char const name[] = "a decimal number";
    };

    struct member_tag : parser_error_handler {};

    template <typename T, typename P> auto member_rule(const char *debug, P p) {
        namespace x3 = boost::spirit::x3;
        return x3::rule<member_tag, T>{debug} = p;
    };

    template <typename T, typename V>
    auto make_member_parser(V T::*const member) {
        namespace x3 = boost::spirit::x3;

        using rule_type = typename parser_for<V>::rule_type;
        using parser_type = typename parser_for<V>::parser;

        static parser_type parser;
        static auto rule = member_rule<rule_type>(parser_for<V>::name, parser);

        return x3::expect[rule][propagate(member)];
    }

#if 0
    template <typename T, typename V>
    auto make_member_parser(std::vector<V> T::*const member) {
        namespace x3 = boost::spirit::x3;

        using value_parser = typename parser_for<V>::parser;
        auto value_name = parser_for<V>::name;

        static parser::vector_parser<value_parser> parser;
        static auto rule = member_rule<std::vector<V>>(value_name, parser);

        return x3::expect[rule][propagate(member)];
    }
#endif

    template <typename T, typename V>
    auto make_member_parser(std::list<V> T::*const member) {
        namespace x3 = boost::spirit::x3;

        using value_parser = typename parser_for<V>::parser;
        auto value_name = parser_for<V>::name;

        static parser::vector_parser<value_parser> parser;
        static auto rule = member_rule<std::vector<V>>(value_name, parser);

        return x3::expect[rule][propagate(member)];
    }

    template <typename T, typename V>
    auto make_member_parser(std::deque<V> T::*const member) {
        namespace x3 = boost::spirit::x3;

        using value_parser = typename parser_for<V>::parser;
        auto value_name = parser_for<V>::name;

        static parser::vector_parser<value_parser> parser;
        static auto rule = member_rule<std::vector<V>>(value_name, parser);

        return x3::expect[rule][propagate(member)];
    }

    template <typename T, typename V>
    auto make_member_parser(std::unordered_set<V> T::*const member) {
        namespace x3 = boost::spirit::x3;

        using value_parser = typename parser_for<V>::parser;
        auto value_name = parser_for<V>::name;

        static parser::vector_parser<value_parser> parser;
        static auto rule = member_rule<std::vector<V>>(value_name, parser);

        return x3::expect[rule][propagate(member)];
    }

    template <typename T, typename V>
    auto make_member_parser(std::set<V> T::*const member) {
        namespace x3 = boost::spirit::x3;

        using value_parser = typename parser_for<V>::parser;
        auto value_name = parser_for<V>::name;

        static parser::vector_parser<value_parser> parser;
        static auto rule = member_rule<std::vector<V>>(value_name, parser);

        return x3::expect[rule][propagate(member)];
    }

} // namespace sk::config::detail

#endif // SK_CONFIG_DETAIL_MAKE_MEMBER_PARSER_HXX_INCLUDED
