/*
 * Copyright (c) 2019, 2020, 2021 SiKol Ltd.
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

#ifndef SK_CONFIG_DETAIL_MAKE_MEMBER_PARSER_HXX_INCLUDED
#define SK_CONFIG_DETAIL_MAKE_MEMBER_PARSER_HXX_INCLUDED

#include <vector>

#include <boost/spirit/home/x3.hpp>

#include <sk/config/detail/propagate.hxx>
#include <sk/config/parser/any_string.hxx>
#include <sk/config/parser/identifier.hxx>
#include <sk/config/parser/list.hxx>
#include <sk/config/parser/qstring.hxx>

namespace sk::config::detail {

    template <typename T> struct parser_for {
        // using parser = void;
    };

    template <typename T> struct parser_for<std::vector<T>> {
        using parser = parser::list_parser<typename parser_for<T>::parser>;
    };

    template <> struct parser_for<std::string> {
        using parser = parser::any_string_parser<char>;
    };

    template <> struct parser_for<std::wstring> {
        using parser = parser::any_string_parser<wchar_t>;
    };

    template <> struct parser_for<short> {
        using parser = boost::spirit::x3::int_parser<short>;
    };

    template <> struct parser_for<unsigned short> {
        using parser = boost::spirit::x3::int_parser<unsigned short>;
    };

    template <> struct parser_for<unsigned int> {
        using parser = boost::spirit::x3::int_parser<unsigned int>;
    };

    template <> struct parser_for<int> {
        using parser = boost::spirit::x3::int_parser<int>;
    };

    template <> struct parser_for<long> {
        using parser = boost::spirit::x3::int_parser<long>;
    };

    template <> struct parser_for<unsigned long> {
        using parser = boost::spirit::x3::int_parser<unsigned long>;
    };

    template <> struct parser_for<long long> {
        using parser = boost::spirit::x3::int_parser<long long>;
    };

    template <> struct parser_for<unsigned long long> {
        using parser = boost::spirit::x3::int_parser<unsigned long long>;
    };

    template <typename T>
    struct config_real_policies : boost::spirit::x3::real_policies<T> {};

    template <> struct parser_for<float> {
        using parser =
            boost::spirit::x3::real_parser<float, config_real_policies<float>>;
    };

    template <> struct parser_for<double> {
        using parser =
            boost::spirit::x3::real_parser<double,
                                           config_real_policies<double>>;
    };

    template <> struct parser_for<long double> {
        using parser =
            boost::spirit::x3::real_parser<long double,
                                           config_real_policies<long double>>;
    };

    template <typename T, typename V>
    auto make_member_parser(V(T::*const member)) {
        namespace x3 = boost::spirit::x3;
        static typename parser_for<V>::parser parser;
        return parser[propagate(member)];
    }

#if 0
    template < typename T, typename V>
    auto make_member_parser(std::vector<V> (T::*const member)) {
        namespace x3 = boost::spirit::x3;
        static typename parser_for<V>::parser parser;
        return parser[propagate(member)];
    }
#endif

} // namespace sk::config::detail

#endif // SK_CONFIG_DETAIL_MAKE_MEMBER_PARSER_HXX_INCLUDED
