/*
 * Copyright (c) 2019, 2020, 2021 SiKol Ltd.
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

#ifndef SK_CONFIG_PARSER_BRACED_HXX_INCLUDED
#define SK_CONFIG_PARSER_BRACED_HXX_INCLUDED

#include <string>

#include <boost/spirit/home/x3.hpp>
#include <boost/spirit/home/x3/support/traits/attribute_of.hpp>

#include <sk/config/parser_policy.hxx>

namespace sk::config::detail::parser {

    template <typename Subject>
    struct braced_parser
        : boost::spirit::x3::unary_parser<Subject, braced_parser<Subject>> {
        using base_type =
            boost::spirit::x3::unary_parser<Subject, braced_parser<Subject>>;
        static bool const is_pass_through_unary = true;

        constexpr braced_parser(Subject const &subject_)
            : base_type(subject_) {}

        template <typename Iterator, typename Context, 
            typename RContext, typename Attribute>
        bool parse(Iterator &first, Iterator const &last,
                   Context const &context, RContext &rcontext,
                   Attribute &attr) const {
            namespace x3 = boost::spirit::x3;

            auto const &policy = x3::get<parser_policy_tag>(context).get();
            auto parser = policy.braced(this->subject);
            return parser.parse(first, last, context, rcontext, attr);
        }
    };

    template <typename Parser>
    braced_parser(Parser) -> braced_parser<Parser>;

} // namespace sk::config::detail::parser

namespace boost::spirit::x3 {

    template <typename Parser>
    struct get_info<sk::config::detail::parser::braced_parser<Parser>> {
        typedef std::string result_type;
        result_type operator()(
            sk::config::detail::parser::braced_parser<Parser> const &) const {
            return "block";
        }
    };

} // namespace boost::spirit::x3

#endif // SK_CONFIG_PARSER_BRACED_HXX_INCLUDED
