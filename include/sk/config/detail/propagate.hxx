/*
 * Copyright (c) 2019, 2020, 2021 SiKol Ltd.
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

#ifndef SK_CONFIG_DETAIL_PROPAGATE_HXX_INCLUDED
#define SK_CONFIG_DETAIL_PROPAGATE_HXX_INCLUDED

#include <boost/spirit/home/x3.hpp>

namespace sk::config::detail {

    // T <- T
    void propagate_value(auto &/*ctx*/, auto &to, auto &from) {
        to = std::move(from);
    }

    void propagate_value(auto &ctx, auto &to, auto &from, auto /*name*/) {
        propagate_value(ctx, to, from);
    }

    template <typename T, typename V> struct propagate {
        V T::*member;

        propagate(V T::*member_) : member(member_) {}

        template <typename Context> void operator()(Context &ctx) {
            namespace x3 = boost::spirit::x3;

            propagate_value(ctx, x3::_val(ctx).*member, x3::_attr(ctx));
        }
    };
    template <typename T, typename V> propagate(V T::*) -> propagate<T, V>;

    template <typename T, typename V, typename U, typename W>
    struct propagate_named {
        V T::*member;
        W U::*name;

        propagate_named(V T::*member_, W U::*name_)
            : member(member_), name(name_) {}

        template <typename Context> void operator()(Context &ctx) {
            namespace x3 = boost::spirit::x3;

            propagate_value(ctx, x3::_val(ctx).*member, x3::_attr(ctx), name);
        }
    };
    template <typename T, typename V, typename U, typename W>
    propagate_named(V T::*, W U::*) -> propagate_named<T, V, U, W>;

} // namespace sk::config::detail

#endif // SK_CONFIG_DETAIL_PROPAGATE_HXX_INCLUDED
