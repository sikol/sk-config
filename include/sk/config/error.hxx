/*
 * Copyright (c) 2019, 2020, 2021 SiKol Ltd.
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

#ifndef SK_CONFIG_CONFIG_ERROR_HXX_INCLUDED
#define SK_CONFIG_CONFIG_ERROR_HXX_INCLUDED

#include <iostream>
#include <stdexcept>
#include <string>

#include <boost/spirit/home/x3.hpp>
#include <boost/spirit/home/x3/support/utility/error_reporting.hpp>

#include <sk/config/error_detail.hxx>

namespace sk::config {

    struct parser_error_handler {
        template <typename Iterator, typename Exception, typename Context>
        boost::spirit::x3::error_handler_result
        on_error(Iterator &first, Iterator const &last, Exception const &x,
                 Context const &context) {
            namespace x3 = boost::spirit::x3;

            auto &error_handler = x3::get<x3::error_handler_tag>(context).get();
            std::string message = "expected " + x.which();
            error_handler(x.where(), message);
            return x3::error_handler_result::fail;
        }
    };

    // A configuration error occured.
    struct error : std::runtime_error {
        error(std::string message) : std::runtime_error(std::move(message)) {}
    };

    // An error occurred parsing the input.
    struct parse_error : error {
        std::vector<error_detail> errors;

        parse_error(std::string message, std::vector<error_detail> errors_)
            : error(std::move(message)), errors(std::move(errors_)) {}
    };

    inline auto operator<<(std::ostream &strm, parse_error const &p)
        -> std::ostream & {

        for (auto &&err : p.errors)
            strm << err;
        return strm;
    }

    // An error occurred doing file I/O.
    struct file_error : error {
        file_error(std::string message) : error(std::move(message)) {}
    };

} // namespace sk::config

#endif // SK_CONFIG_CONFIG_ERROR_HXX_INCLUDED
