/*
 * Copyright (c) 2019, 2020, 2021 SiKol Ltd.
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

#ifndef SK_CONFIG_PARSER_OPTION_HXX_INCLUDED
#define SK_CONFIG_PARSER_OPTION_HXX_INCLUDED

#include <boost/spirit/home/x3.hpp>

#include <sk/config/detail/make_member_parser.hxx>

namespace sk::config {

    /*
     * option(label, member): parse an option with the given label (usually
     * a string, although it doesn't have to be) and place the value in
     * 'member', which must be a pointer to member.
     */
    template <typename T, typename V> auto option(auto label, V T::*member) {
        namespace x3 = boost::spirit::x3;

        if constexpr (std::same_as<bool, V>) {
            // bool is special because it doesn't have a value.
            auto set_bool = [=](auto &ctx) { x3::_val(ctx).*member = true; };
            auto parser = x3::as_parser(label) > ';';
            return parser[set_bool];
        } else {
            return x3::as_parser(label) > detail::make_member_parser(member) >
                   ';';
        }
    };

} // namespace sk::config::parser

#endif // SK_CONFIG_PARSER_OPTION_HXX_INCLUDED
