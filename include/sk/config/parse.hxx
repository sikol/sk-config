/*
 * Copyright (c) 2019, 2020, 2021 SiKol Ltd.
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

#ifndef SK_CONFIG_CONFIG_PARSE_HXX
#define SK_CONFIG_CONFIG_PARSE_HXX

#include <iostream>
#include <iterator>
#include <optional>
#include <stdexcept>
#include <type_traits>
#include <variant>

#include <boost/spirit/home/x3.hpp>
#include <boost/spirit/home/x3/support/utility/error_reporting.hpp>

#include <sk/config/error.hxx>
#include <sk/config/parse.hxx>
#include <sk/config/parser/comment.hxx>
#include <sk/config/parser/identifier.hxx>
#include <sk/config/parser/option.hxx>
#include <sk/config/parser/qstring.hxx>
#include <sk/config/error.hxx>
#include <sk/config/detail/error_formatter.hxx>

namespace sk::config {

    template <typename Iterator>
    auto parse(Iterator first, Iterator last, auto const &grammar, auto &ret) {
        namespace x3 = boost::spirit::x3;

        std::vector<error_detail> errors;
        auto error_handler =
            detail::error_formatter(first, last, std::back_inserter(errors));

        auto const grammar_ =
            x3::with<x3::error_handler_tag>(std::ref(error_handler))[grammar];

        bool r = x3::phrase_parse(first, last, grammar_, parser::comment, ret);
        if (r == false || (first != last))
            throw parse_error("could not parse the entire input", errors);
        return true;
    }

    auto parse(std::ranges::range auto const &r, auto const &grammar,
               auto &ret) {
        return sk::config::parse(std::ranges::begin(r), std::ranges::end(r),
                                 grammar, ret);
    }

    auto parse(char const *s, auto const &grammar, auto &ret) {
        return sk::config::parse(std::string_view(s), grammar, ret);
    }

} // namespace sk::config

#endif // YARROW_CONFIG_PARSE_HXX
