/*
 * Copyright (c) 2019, 2020, 2021 SiKol Ltd.
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

#ifndef SK_CONFIG_PARSER_OPTION_HXX_INCLUDED
#define SK_CONFIG_PARSER_OPTION_HXX_INCLUDED

#include <string>

#include <boost/spirit/home/x3.hpp>
#include <boost/spirit/home/x3/support/utility/error_reporting.hpp>

#include <sk/config/detail/make_member_parser.hxx>
#include <sk/config/detail/propagate.hxx>
#include <sk/config/parser/identifier.hxx>
#include <sk/config/parser/qstring.hxx>
#include <sk/config/error.hxx>

namespace sk::config::parser {

    struct rule_tag : parser_error_handler {};

    template <typename T, typename P> auto rule(const char *debug, P p) {
        namespace x3 = boost::spirit::x3;
        return x3::rule<rule_tag, T>{debug} = p;
    };

    /*
     * option(label, member): parse an option with the given label (usually
     * a string, although it doesn't have to be) and place the value in
     * 'member', which must be a pointer to member.
     */
    template <typename T, typename V> auto option(auto label, V T::*member) {
        namespace x3 = boost::spirit::x3;

        if constexpr (std::same_as<bool, V>) {
            // bool is special because it doesn't have a value.
            auto set_bool = [=](auto &ctx) { x3::_val(ctx).*member = true; };
            auto parser = x3::as_parser(label) > ';';
            return parser[set_bool];
        } else {
            return x3::as_parser(label) > detail::make_member_parser(member) >
                   ';';
        }
    };

    /*
     * block(label, members...): parse a block with the given label which
     * contains the members.
     */
    template <typename U, typename T, typename V, typename... Members>
    auto block(auto label, V T::*mm, Members &&...members) {
        namespace x3 = boost::spirit::x3;

        auto member_parser = *(... | std::forward<Members>(members));

        auto do_nothing = [&](auto &) {};
        auto parser = x3::as_parser(label) >> ('{' >
                      member_parser[do_nothing] > '}') > ';';
        return rule<U>(label, parser)[detail::propagate(mm)];
    }

    template <typename U, typename W, typename T, typename V,
              typename... Members>
    auto block(auto label, W U::*name, V T::*mm, Members &&...members) {
        namespace x3 = boost::spirit::x3;

        auto member_parser = *(... | std::forward<Members>(members));

        auto do_nothing = [&](auto &) {};
        auto parser = x3::as_parser(label) >> detail::make_member_parser(name) >> ('{' >
                      member_parser[do_nothing] > '}') > ';';
        return rule<U>(label, parser)[detail::propagate(mm)];
    }

    /*
     * config<T>(members...): parse a configuration file with the given
     * members, which can be either options or blocks.  The result of
     * dparse(..., config<T>(...)) is T.
     */
    template <typename T, typename... Members>
    auto config(Members &&...members) {
        namespace x3 = boost::spirit::x3;

        auto member_parser = *(... | std::forward<Members>(members));

        auto do_nothing = [&](auto &) {};
        auto parser = member_parser[do_nothing];
        //> x3::eoi;
        return rule<T>("config", parser);
    }

} // namespace sk::config::parser

#endif // SK_CONFIG_PARSER_OPTION_HXX_INCLUDED
