/*
 * Copyright (c) 2019, 2020, 2021 SiKol Ltd.
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

// Disable unhelpful MSVC warnings.
#define _CRT_SECURE_NO_WARNINGS

#include <cstdio>
#include <cstring>
#include <fstream>
#include <iostream>
#include <ranges>
#include <set>
#include <sstream>
#include <stdexcept>
#include <string>

#include <fmt/core.h>

#include <sk/config.hxx>

struct user {
    int uid, gid;
    std::string username;
};

struct group {
    std::string name;
    int gid;
    std::set<std::string> members;
};

struct config {
    std::map<std::string, user> users;
    std::map<std::string, group> groups;
};

int main(int argc, char **argv) {
    if (argc != 2) {
        fmt::print(stderr, "usage: {} <filename>\n", argv[0]);
        return 1;
    }
    std::filesystem::path filename(argv[1]);

    namespace cfg = sk::config;

    auto grammar = cfg::config<config>(
        cfg::block<user>("user", &user::username, &config::users,
                         cfg::option("uid", &user::uid),
                         cfg::option("gid", &user::gid)),
        cfg::block<group>("group", &group::name, &config::groups,
                          cfg::option("gid", &group::gid),
                          cfg::option("member", &group::members)));

    config loaded_config;

    try {
        cfg::parse_file(filename, grammar, loaded_config);
    } catch (cfg::parse_error const &e) {
        std::cerr << e;
        return 1;
    } catch (std::exception const &e) {
        fmt::print(stderr, "{}: {} ({})\n", argv[1], e.what(),
                   typeid(e).name());
        return 1;
    }

    fmt::print("users:\n");

    for (auto &&[_, user] : loaded_config.users)
        fmt::print("\t{}: uid={}, gid={}\n", user.username, user.gid, user.gid);

    fmt::print("groups:\n");

    for (auto &&[_, group] : loaded_config.groups) {
        fmt::print("\t{}: gid={}, members=", group.name, group.gid);
        std::ranges::copy(group.members,
                          std::ostream_iterator<std::string>(std::cout, " "));
    }

    return 0;
}
