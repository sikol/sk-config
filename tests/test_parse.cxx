/*
 * Copyright (c) 2019, 2020, 2021 SiKol Ltd.
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

#include <catch.hpp>

#include <cstring>
#include <sstream>
#include <stdexcept>
#include <string>

#include <sk/config/error.hxx>
#include <sk/config/parse.hxx>

/*
 * Declarative parser tests.
 */

TEST_CASE("unsigned short value") {
    namespace cr = sk::config::parser;

    struct test_config {
        unsigned short v;
    };

    auto grammar = cr::config<test_config>(cr::option("v", &test_config::v));
    auto c = sk::config::parse("v 42;", grammar);
    REQUIRE(c.v == 42);
}

TEST_CASE("short value") {
    namespace cr = sk::config::parser;

    struct test_config {
        short v;
    };

    auto grammar = cr::config<test_config>(cr::option("v", &test_config::v));
    auto c = sk::config::parse("v -42;", grammar);
    REQUIRE(c.v == -42);
}

TEST_CASE("unsigned int value") {
    namespace cr = sk::config::parser;

    struct test_config {
        unsigned int v;
    };

    auto grammar = cr::config<test_config>(cr::option("v", &test_config::v));
    auto c = sk::config::parse("v 42;", grammar);
    REQUIRE(c.v == 42);
}

TEST_CASE("int value") {
    namespace cr = sk::config::parser;

    struct test_config {
        int v;
    };

    auto grammar = cr::config<test_config>(cr::option("v", &test_config::v));
    auto c = sk::config::parse("v -42;", grammar);
    REQUIRE(c.v == -42);
}

TEST_CASE("unsigned long value") {
    namespace cr = sk::config::parser;

    struct test_config {
        unsigned long v;
    };

    auto grammar = cr::config<test_config>(cr::option("v", &test_config::v));
    auto c = sk::config::parse("v 42;", grammar);
    REQUIRE(c.v == 42);
}

TEST_CASE("long value") {
    namespace cr = sk::config::parser;

    struct test_config {
        long v;
    };

    auto grammar = cr::config<test_config>(cr::option("v", &test_config::v));
    auto c = sk::config::parse("v -42;", grammar);
    REQUIRE(c.v == -42);
}

TEST_CASE("unsigned long long value") {
    namespace cr = sk::config::parser;

    struct test_config {
        unsigned long long v;
    };

    auto grammar = cr::config<test_config>(cr::option("v", &test_config::v));
    auto c = sk::config::parse("v 42;", grammar);
    REQUIRE(c.v == 42);
}

TEST_CASE("long long value") {
    namespace cr = sk::config::parser;

    struct test_config {
        long long v;
    };

    auto grammar = cr::config<test_config>(cr::option("v", &test_config::v));
    auto c = sk::config::parse("v -42;", grammar);
    REQUIRE(c.v == -42);
}

TEST_CASE("float value") {
    namespace cr = sk::config::parser;

    struct test_config {
        float v;
    };

    auto grammar = cr::config<test_config>(cr::option("v", &test_config::v));
    auto c = sk::config::parse("v 5.4;", grammar);
    REQUIRE(c.v == 5.4f);
}

TEST_CASE("double value") {
    namespace cr = sk::config::parser;

    struct test_config {
        double v;
    };

    auto grammar = cr::config<test_config>(cr::option("v", &test_config::v));
    auto c = sk::config::parse("v 5.4;", grammar);
    REQUIRE(c.v == 5.4);
}

TEST_CASE("long double value") {
    namespace cr = sk::config::parser;

    struct test_config {
        long double v;
    };

    auto grammar = cr::config<test_config>(cr::option("v", &test_config::v));
    auto c = sk::config::parse("v 5.4;", grammar);
    REQUIRE(c.v == 5.4);
}

TEST_CASE("double with int argument") {
    namespace cr = sk::config::parser;

    struct test_config {
        double v;
    };

    auto grammar = cr::config<test_config>(cr::option("v", &test_config::v));
    auto c = sk::config::parse("v 5;", grammar);
    REQUIRE(c.v == 5);
}

TEST_CASE("basic config") {
    struct test_block {
        int int_value = 0;
        bool bool_value = false;
        std::string string_value;
    };

    struct test_config {
        int other_int_value;
        test_block b;
    };

    namespace cr = sk::config::parser;

    auto grammar = cr::config<test_config>(
        cr::option("other-int-value", &test_config::other_int_value),
        cr::block("test-block", &test_config::b,
                  cr::option("string-value", &test_block::string_value),
                  cr::option("int-value", &test_block::int_value),
                  cr::option("bool-value", &test_block::bool_value)));

    auto c = sk::config::parse(R"(
other-int-value 666;
test-block {
  string-value 'some string';
  int-value 42;
  bool-value;
};
)",
                                grammar);

    REQUIRE(c.other_int_value == 666);
    REQUIRE(c.b.int_value == 42);
    REQUIRE(c.b.string_value == "some string");
    REQUIRE(c.b.bool_value == true);
}

TEST_CASE("vector of items") {
    namespace cr = sk::config::parser;

    struct test_config {
        std::vector<int> items;
    };

    auto grammar =
        cr::config<test_config>(cr::option("int-value", &test_config::items));
    auto c = sk::config::parse(R"(
int-value 1, 42, 666;
)",
                                grammar);

    REQUIRE(c.items.size() == 3);
    REQUIRE(c.items[0] == 1);
    REQUIRE(c.items[1] == 42);
    REQUIRE(c.items[2] == 666);
}
