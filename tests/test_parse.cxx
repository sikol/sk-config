/*
 * Copyright (c) 2019, 2020, 2021 SiKol Ltd.
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

#include <catch.hpp>

#include <cstring>
#include <sstream>
#include <stdexcept>
#include <string>

#include <sk/config.hxx>

TEST_CASE("basic config") {
    struct test_block {
        int int_value = 0;
        bool bool_value = false;
        std::string string_value;
    };

    struct test_config {
        int other_int_value;
        test_block b;
    };

    namespace cr = sk::config;

    auto grammar = cr::config<test_config>(
        cr::option("other-int-value", &test_config::other_int_value),
        cr::block<test_block>("test-block", &test_config::b,
                  cr::option("string-value", &test_block::string_value),
                  cr::option("int-value", &test_block::int_value),
                  cr::option("bool-value", &test_block::bool_value)));

    test_config c;
    sk::config::parse(R"(
other-int-value 666;
test-block {
  string-value 'some string';
  int-value 42;
  bool-value;
};
)",
                                grammar, c);

    REQUIRE(c.other_int_value == 666);
    REQUIRE(c.b.int_value == 42);
    REQUIRE(c.b.string_value == "some string");
    REQUIRE(c.b.bool_value == true);
}

TEST_CASE("vector of items") {
    namespace cr = sk::config;

    struct test_config {
        std::vector<int> items;
    };

    auto grammar =
        cr::config<test_config>(cr::option("int-value", &test_config::items));
    test_config c;

    sk::config::parse(R"(
int-value 1, 42;
int-value 666;
)",
                                grammar, c);

    REQUIRE(c.items.size() == 3);
    REQUIRE(c.items[0] == 1);
    REQUIRE(c.items[1] == 42);
    REQUIRE(c.items[2] == 666);
}

TEST_CASE("named block") {
    namespace cr = sk::config;

    struct int_config {
        std::string name;
        int value;
    };

    struct test_config {
        std::vector<int_config> ints;
    };

    auto grammar = cr::config<test_config>(  //
        cr::block<int_config>("int", &int_config::name, &test_config::ints, //
                  cr::option("value", &int_config::value)));

    test_config c;
    sk::config::parse(R"(
int "one" {
    value 1;
};
int "answer" {
    value 42;
};
)",
                               grammar, c);

    REQUIRE(c.ints[0].name == "one");
    REQUIRE(c.ints[0].value == 1);
    REQUIRE(c.ints[1].name == "answer");
    REQUIRE(c.ints[1].value == 42);
}
